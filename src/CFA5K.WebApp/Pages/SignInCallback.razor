@using Blazored.LocalStorage
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Supabase.Gotrue
@attribute [Route(SignInCallback.DefaultRouteTemplate)]
@inject ILogger<SignInCallback> Logger
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage

@if (_initialized)
{
    @switch (_provider)
    {
        case Constants.Provider.Github:
            <i>GitHub</i>
            <GitHubOauthCallback OnSuccess=@(OnCallbackSuccess)
                                 RedirectTo=@(null /*_redirectTo*/) />
            break;

        case null:
        default:
            _redirectTo = null;
            <i>Email</i>
            <EmailSignInCallback OnSuccess=@(OnCallbackSuccess)
                                 RedirectTo=@(null /*_redirectTo*/) />
            break;
    }

    @if (string.IsNullOrEmpty(_redirectTo))
    {
        @if (_uri == null)
        {
            <i>parsing...</i>
        }
        else
        {
            <div>
                Fragment: @_uri.Fragment
            </div>
            <div>
                Fragment Params:
                <ul>
                    @foreach (var kv in _fragmentParams!)
                    {
                        <li>[<code>@kv.Key</code>] = [<code>@kv.Value</code>]</li>
                    }
                </ul>
            </div>
            <div>
                Query: @_uri.Query
            </div>
            <div>
                Query Params:
                <ul>
                    @foreach (var kv in _queryParams!)
                    {
                        <li>[<code>@kv.Key</code>] = [<code>@kv.Value</code>]</li>
                    }
                </ul>
            </div>
        }
    }
}

@code
{
    public const string DefaultRouteTemplate = "/signin/callback/{Provider?}";
    public const string DefaultRouteFormat = "/signin/callback/{0}";

    private const string RedirectToStorageKey = $"{nameof(SignInCallback)}_RedirectTo";

    [Parameter] public string Provider { get; set; } = string.Empty;

    private bool _initialized;
    private Constants.Provider? _provider;
    private string? _redirectTo = null;

    private Uri? _uri;
    private Dictionary<string, StringValues>? _fragmentParams;
    private Dictionary<string, StringValues>? _queryParams;

    protected override async Task OnInitializedAsync()
    {
        _redirectTo = await GetRedirectTo();

        if (Enum.TryParse<Constants.Provider>(Provider, ignoreCase: true, out var provider))
        {
            _provider = provider;
            Logger.LogInformation("Successfully decoded provider [{provider}]", _provider);
        }

        _uri = Nav.ToAbsoluteUri(Nav.Uri);
        _fragmentParams = QueryHelpers.ParseQuery(_uri.Fragment.TrimStart('#'));
        _queryParams = QueryHelpers.ParseQuery(_uri.Query.TrimStart('?'));

        _initialized = true;
    }

    void OnCallbackSuccess()
    {
        Logger.LogInformation("Callback Success!");
        if (!string.IsNullOrEmpty(_redirectTo))
        {
            Nav.NavigateTo(_redirectTo);
        }
    }

    public static string GetRoute(NavigationManager nav, Constants.Provider? provider = null)
    {
        return nav.ToAbsoluteUri(string.Format(DefaultRouteFormat,
            provider.ToString() ?? string.Empty)).ToString();
    }

    public static async Task SetRedirectTo(ILocalStorageService localStorage, string? redirectTo)
    {
        if (string.IsNullOrEmpty(redirectTo))
        {
            await localStorage.RemoveItemAsync(RedirectToStorageKey);
        }
        else
        {
            await localStorage.SetItemAsStringAsync(RedirectToStorageKey, redirectTo);
        }
    }

    private async Task<string?> GetRedirectTo()
    {
        return await LocalStorage.ContainKeyAsync(RedirectToStorageKey)
            ? await LocalStorage.GetItemAsStringAsync(RedirectToStorageKey)
            : null;
    }
}
